{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome! We are team 202","text":"","tags":["tag1","tag2"]},{"location":"#home","title":"HOME","text":"<ul> <li>Project Name: Dam Marbles</li> <li>Team 202</li> <li>Alexander Dooley, Frank Wade, Luis Saenz, Tyler Whittle</li> <li>Preparation Date: April 20, 2025</li> <li>Spring 2025</li> <li>ASU, EGR 314, Prof. Dan Aukes</li> </ul>","tags":["tag1","tag2"]},{"location":"#team-member-schematics","title":"Team Member Schematics","text":"Team Members Schematic Links Tyler Sensor Subsystem (Hall Effect Sensor) Luis Wifi Subsystem Frank Motor Subsystem (Stepper Motor) Alex HMI (Human Machine Interface) Subsystem","tags":["tag1","tag2"]},{"location":"#welcome","title":"Welcome","text":"<p>On September 12th, 1962, John F Kennedy spoke to the nation and told them that we are going to the moon before the end of the decade. Within this speech, President Kennedy also said \u201cThe growth of our science and education will be enriched by new knowledge of our universe and environment, by new techniques of learning and mapping and observation, by new tools and computers for industry, medicine, the home as well as the school. Technical institutions, such as Rice, will reap the harvest of these gains,\u201d. Today, education gives forth STEM to help the students of today, follow in the footsteps of their grandfathers. Through the learning of science, technology, engineering and mathematics, like those who touched the heavens, the generation of tomorrow might one day take humanity somewhere yet to feel the human touch.</p> <p>Grains of curiosity and dreams, sprinkled among the seeds of STEM, are cultivated by both teachers and professors.</p> <p>To aid the growth of these grains, the mission of Team 202 is to take S.T.E.M concepts found in education and deliver them in a manner students would understand.</p> <p>Team 202 will design a mechanical device to show scientific principles of energy conversion between different states, that also highlights the use of technology and engineering. Our goal is to add more seeds of curiosity and try to inspire more students to pursue more STEM related jobs.</p> <p>To achieve our task, Team 202 got together to discuss end goals for the project, deciding on a device that can task driven or function autonomously. By doing this, Team 202 can also develop our own skills in engineering and robotics, increasing our effectiveness as engineers. The team will assign roles to operate more smoothly, each member will practice effective communication through various means and be accountable for the task they are given</p>","tags":["tag1","tag2"]},{"location":"#results","title":"Results","text":"","tags":["tag1","tag2"]},{"location":"BdPdMS/","title":"Block Diagram","text":""},{"location":"BdPdMS/#block-diagram","title":"Block Diagram","text":""},{"location":"BdPdMS/#process-diagram","title":"Process Diagram","text":"<p>Our communication sequence easily grants the user full control over the stepper motor\u2019s speed and visibility of its current RPM value via the Hall Effect sensor.  This system is designed for intuitive interaction with energy generation processes, so the sequence is built to support user expectations around control, feedback, real time visibility, and accessibility.</p> <p>The various buttons, and functions per button, and wifi system allow for dual user access (web-based and in-person), so that remote users can engage with the system online while physical ones interact locally.  Along with multi-user operability and control interface consistency, each task of the system is designed to function at the press of a button from either user.  Two buttons send messages to their corresponding neighboring subsystems to control the stepper motor gate and monitor the Hall Effect Sensor all at once.  As the Hall Effect sensor reads new inputs at a fast rate, one of the HMI board\u2019s buttons will switch the OLED screen so the user can view the current value, as well as observe changes in value upon each new button press, providing almost immediate feedback. When the wifi system receives the Hall Effect sensor value it displays it to the user via MQTT, periodically refreshing the value. The target RPM can also be modified upon another button press, which toggles the RPM value between 0 to 100.  Upon selection, the target value is sent to all other boards. The wifi system operates in a similar manner. It receives the targeted RPM from the user over MQTT, the received publication is then passed to the Hall Effect Sensor system to conduct their feedback loop.  </p> <p>This is a similar process for user control over the stepper motor; a separate button will send messages directly and exclusively to the subsystem responsible for motor control. Web-based users can also interact with the exhibit this way. By publishing a message in MQTT, the user can manipulate the stepper motor into three positions, open, half-open, and closed. The system that contains the wifi receives the publication and sends a message directed to the actuator system, simultaneously updating the MQTT text box that notifies the user that the motor has been set to the user's desired position.  </p>"},{"location":"BdPdMS/#message-structure","title":"Message Structure","text":"Message Type  1 Byte  (int8_t) Description 1 Set motor in X position 2 Print sensor value, X 3 Set target RPM, X 4 Broadcast"},{"location":"BdPdMS/#team-id","title":"Team ID","text":"Alex Luis Tyler Frank Team Id (char) a b c d"},{"location":"BdPdMS/#message-type-1","title":"Message Type 1:","text":"Byte 1 (char) Byte 2 (char) Byte 3 (char) Byte 4 (char) Byte 5 (int8_t) Byte 6 (int8_t) Byte 7 (char) Byte 8 (char) A Z Source ID (char) Dest ID (char) Message Type (int8_t) X(int8_t) Y B"},{"location":"BdPdMS/#message-type-2","title":"Message Type 2:","text":"Byte 1 (char) Byte 2 (char) Byte 3 (char) Byte 4 (char) Byte 5 (int8_t) Byte 6 (int8_t) Byte 7 (char) Byte 8 (char) A Z Source ID (char) Dest ID (char) Message Type (int8_t) X(int8_t) Y B"},{"location":"BdPdMS/#message-type-3","title":"Message Type 3:","text":"Byte 1 (char) Byte 2 (char) Byte 3 (char) Byte 4 (char) Byte 5 (int8_t) Byte 6 (int8_t) Byte 7 (char) Byte 8 (char) A Z Source ID (char) Dest ID (char) Message Type (int8_t) X(int8_t) Y B"},{"location":"BdPdMS/#message-type-4","title":"Message Type 4:","text":"Byte 1 (char) Byte 2 (char) Byte 3 (char) Byte 4 (char) Byte 5 (int8_t) Byte 6-55 (string) Byte 56 (char) Byte 57 (char) A Z Source ID (char) X Message Type (int8_t) String Y B"},{"location":"BdPdMS/#team-verification-table","title":"Team Verification Table:","text":"Message Type Message ID  Type  uint8_t Alex  Role: HMI  ID: a Frank  Role: Actuator  ID: c Tyler  Role: Sensor  ID: d Luis  Role: MQTT  ID: b Motor Value 0x01 S: Sends message when button is pressed. R: Lights a single LED. S: Sends when Target RPM is received. S: (mqtt topic: /EGR314/TEAM202LS/SUB) Sensor Value 0x02 R: Display on OLED. - S: Sends every second. R: (mqtt topic: /EGR314/TEAM202LS/SENSOR) Target RPM 0x03 S: Sends message when button is pressed. - R: Lights LED S: (mqtt topic: /EGR314/TEAM202LS/RPM) Item Meaning S Sends the message R Receives &amp; does something with message - Do nothing, passes message <p>The first approach the team took in designing the message structure was deciding what information is mandatory for each subsystem. After creating our mandatory list of messages, team 202 would then include messages that would help them debug the system in real-time. After all potential messages were created, we then trimmed the list. Most, if not all trimmed messages, include messages that provide information that can be obtained by another message.</p> <p>Once we had compiled our list of messages, team 202 then discussed the best way to format them. We came to the conclusion that including \"message type\" in our message structure will ensure that each member will know the context of the message they are receiving. Additionally, we had discussed that it would be inefficient for a device to send the same message to more than one system, so we created those messages to be sent out as a broadcast message as well.</p>"},{"location":"BdPdMS/#top-5-biggest-changes","title":"Top 5 Biggest Changes","text":"<li>We originally had 8 messages, broadcast message included. Four messages were dropped as they can be interpreted by another message. Dropping these messages allowed the team to continue developing the exhibit as well as decreases the noise between systems. This also ensures that the only communication happening between systems are priority and necessary.</li> <li></li> <li></li> <li></li> <li></li>"},{"location":"IdeationandConcept/","title":"Ideation and Concept Generation","text":""},{"location":"IdeationandConcept/#the-exhibit","title":"The Exhibit","text":"<p>This exhibit is a way to show young adults that everything, both large or small can have energy. The energy on display is gravitational potential energy which can change if the height of the spheres changes. The transfer of energy between the falling sphere and the lightbulb is done with the aid of a generator. </p> <p>The audience for this exhibit are middle schoolers to highschoolers. Hydroelectric plants have been turning out kilowatts of power for almost 150 years. Today the southwest uses wind power, solar power, and nuclear power to provide energy.</p>"},{"location":"IdeationandConcept/#phases-of-brainstorming","title":"Phases of Brainstorming","text":""},{"location":"IdeationandConcept/#phase-one","title":"Phase One","text":""},{"location":"IdeationandConcept/#phase-two","title":"Phase Two","text":""},{"location":"IdeationandConcept/#final-phase","title":"Final Phase","text":""},{"location":"IdeationandConcept/#design-sketch","title":"Design Sketch","text":""},{"location":"IdeationandConcept/#description","title":"Description","text":"<p>The concept sketch can be described as an interactive exhibit. The goal of the exhibit is to use S.T.E.M. to create an exhibit that will inspire students, ranging from 6th to 12th grade, about S.T.E.M. The concept sketch shows the increase in potential energy stored in objects at higher elevation and how we can use different means to capture that energy and transfer it. What makes it an interactive exhibit is that the user can choose what height level to release the \u201cwater\u201d down the ramp as well as choose the volume of \u201cwater\u201d retreating from our reservoir. How the exhibit functions; first, there are three motors attached to 3 different valves and reservoirs. The motors will open and close the valve to release marbles, \u201cwater\u201d, down the ramp, exiting through another simple motor to collect and distribute energy to a nearby LED. Several buttons will be used so that the user can choose the desired parameters for the exhibit. After parameters are entered and the exhibit is on, an LED screen will display the amount of voltage being produced by the generator, simple motor. When the exhibit is connected to a user\u2019s device, the user will have the same function as the buttons.</p> <p>When designing the device team 202 will attempt to keep it simple in function and aesthetic. Although our target audience are students who are 6th to 12th grade, we would like students below the 6th grade to see the exhibit and understand how to function it as well. To keep it simple, if we have to provide an instruction document on how to operate the exhibit, it will be a single page and straight to the point. We also plan to apply informative art, or text, next to buttons to facilitate smoother operating. Such as, L1, L2, and L3, these variables would be next to the buttons, referring to the different elevations of the exhibit,  as well as labeled again at the elevation it is referring to. The exhibit is operated and only interactive through buttons, our only safety concern is if the buttons to interact with the device are too close to the exit of the marbles. To combat this we may change the exit of the marbles or the placement of the buttons. Regarding durability and comfort, we expect the marbles to produce a minimal amount of destructive force going down the ramp and therefore do not expect durability to play a large role in our exhibit. Because the exhibit is operated through buttons and designed to display information, comfort does not play a role in our exhibit. Once our buttons are labeled, another useful tool to operate the exhibit will be an instruction page. As stated above, the instruction page will be short. The instructions will be a single page with digestible terminology on how to operate the exhibit and the steps will be numbered to limit human error and decide the direction of interaction with the exhibit.</p>"},{"location":"IdeationandConcept/#link-to-presentation","title":"Link to presentation","text":"<p>Powerpoint Presentation</p>"},{"location":"appendix/","title":"Appendix","text":""},{"location":"appendix/#science-standard","title":"Science Standard","text":"Science Standards Link Cross Concept CC AZ State K-12 Standards K-12 Standards Arizona Science and Engineering Practices AZ Science and Eng Practices"},{"location":"teamOrg/","title":"Team Organization","text":""},{"location":"teamOrg/#roles","title":"Roles","text":"Roles Member Description Submitter/ Lead Luis Saenz Submits assignments, as well as upload to github. The lead, ensures that each member has a contribution and tracks upcoming assignments. Team Organizer Frank Wade Calls team meetings and records team sessions. Technical Lead Tyler Whittle Resolves technical issues, and provides solutions to technical concerns of other members Design Lead Alexander Dooley Designs teams product."},{"location":"teamOrg/#communication","title":"Communication","text":"<p>Types of communication that Team 202 uses:</p> Communication Type Use Discord To share files and conduct everyday communication. Text Message Group Only used for communication second to Discord. Google Folder Primarily used to share files"},{"location":"teamOrg/#weekly-availability","title":"Weekly Availability","text":"Time Sunday Monday Tuesday Wednesday Thursday Friday Saturday 08:00 FW FW AD 08:30 FW FW AD 09:00 LS AD 09:30 LS AD 10:00 LS LS AD 10:30 LS LS AD 11:00 LS LS AD 11:30 LS FW FW LS 12:00 LS FW LS FW LS FW FW LS FW FW 12:30 LS LS FW LS FW FW LS 13:00 LS LS FW LS AD FW FW LS AD 13:30 LS LS LS AD FW LS AD 14:00 LS LS LS AD FW LS AD LS 14:30 LS LS LS LS AD LS 15:00 LS LS AD LS 16:30 LS LS LS 17:00 LS LS LS 17:30 LS LS LS 18:00 LS LS LS LS LS 18:30 LS LS LS LS LS 19:00 LS LS LS LS LS 19:30 LS LS LS LS LS 20:00 LS LS LS FW LS LS LS FW 20:30 LS LS LS FW LS LS AD LS AD FW 21:00 LS LS LS FW LS LS AD FW LS AD FW 21:30 LS LS LS FW LS LS AD FW LS AD FW 22:00 LS LS LS FW LS LS FW LS AD FW <p>Note: Wade work F/S/S 7-5:30, M 2:30-5:30</p> <p>Legend:</p> <ul> <li>LS: Luis</li> <li>TW: Tyler</li> <li>FW: Frank</li> <li>AD: Alex</li> </ul>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"Subfolder","text":"Pages Links Resources Resources Showcase Poster Showcase Poster Reflection Reflection"},{"location":"subfolder/reflection/","title":"Reflection","text":""},{"location":"subfolder/reflection/#lessons-learned","title":"Lessons Learned","text":"<p>There are many things one can learn from trying to develop something from conception to creation. In that span of time, one might go through a series of emotions, feelings, and attitudes yet walk away with knowledge gained. There are several things we have walked away with, seeds of understanding that we have gathered along the way. We learned that failure is not an option. There were times when some of us just wanted to step away, but we could not let the team down. We found that this project takes a lot of time and understanding to be successful. And that success is not something working perfectly, success is something that works at all. If you can get movement, a light to toggle, something to reset; you have success, take pride in the little wins. One of the most important things we have learned is to step away from the project for a few minutes. This project can be vastly overwhelming and can be consuming, you need to let it marinate from time to time.</p> <p>Also, we have learned that office hours will help you gain understanding when the work seems confusing. Teachers, TAs and other students are willing to help you if you ask for help. This experience also taught us to seek criticism, when any of us had a disabled board any opinion would suffice; anything to keep the project moving forward. To help facilitate our ideas, we learned to start having notes that you can look over and refer to, this helped get our ideas down and allow us to review and maybe implement them later.</p> <p>Outside of the project, we learned that sleep is hugely important. There were times when some of us were not as rested, and the work was much more challenging to complete. With the lack of sleep and overwhelming assignments, stress was one feeling we were not lacking. To combat this we learned to step away and work one problem at a time. Lastly, choose your team wisely, you need to be able to work with everything your team members bring to the table: their knowledge, their personality, their quarks.</p>"},{"location":"subfolder/reflection/#recommendations","title":"Recommendations","text":"<p>The best recommendations we can give to future students of EGR314 are these, do not take this course and work full time, you will just overwhelm yourself between work and school. When the time comes to designing your PCBs, double the time you think it will take you to complete. You will want to factor in unforeseen mistakes that will not allow your board to be manufactured. As you select the parts you want for your build, take calipers and get a good sense of dimensions before you pick the part, small surface mounted parts are very difficult to work with. Once you're ready to order a board, order both a board from Peralta and JLC. Additionally, we recommend to order a Peralta board first, this board should be the bare minimum of your device. This action will allow you to see if your schematic works without any peripherals and allows you to change supporting components, like making resistors or capacitors slightly larger for easier handling, before ordering from JLC. When you order your parts, you want to have at least three to four of the \u201clarger\u201d items and five to seven of the \u201csmaller\u201d items; small parts get lost easily. Also when ordering your parts, read the datasheet, at least the pages that state how the device operates and how to set it up bare. This will be extremely helpful when choosing smaller components to support that device. When building your device we recommend to use every pin that your chip has. Pins burn out, traces burn out, pads do not always connect. You may not need every pin, but it is nice to have them should something happen and depending on the system you chose, the device you created is basically a dev board with an additional peripheral. Before everything above, we recommend to practice with the tools of this occupation. For example, practice your coding, they're plenty of coding websites that have puzzles to solve, practice soldering, you can always have a cleaner joint or use less flux, or practice with different debugging tools such as an oscilloscope. Lastly, hardware, we recommend you to invest in a computer with at least a terabyte of storage; applications needed for this course consume a lot of storage. Also when you are looking at a new computer ensure that the device meets system requirements for the applications that you will be using in this course.</p>"},{"location":"subfolder/reflection/#version-20","title":"Version 2.0","text":"<p>The team found that the actuator's code would bog down the system. Data would come in, but the system would not handle correctly and send nothing out. This causes group communication to fail as nothing gets past the actuator code. The only way the actuator system worked was to comment out the motor code. We would fix this by first creating functioning motor and motor driver code. Then integrate the group messaging code and motor driver code together.</p> <p>For our HMI system, we would improve functionality and appearance of the menu. We would add the sensor value to update on the first page of the menu as well as access other functions of the exhibit on the same page. We would also edit the menu's target RPM and motor's position menu. Instead of the target RPM menu being able to set the value in 10's, we would grant the user more manipulation by being able to index the RPM value by one. And for the motor's position menu, instead of pressing buttons that index between positions close, half-open, and open. We would instead code the buttons to open or close the actuator as its respected button is being pressed or held. Then when button is released the actuator stops the opening or closing.</p> <p>Although the wifi system's and sensor system's code worked as originated. To provide exhibit a tad more functionality we would add code in the sensor system to read the voltage of the motor at the bottom gate. This voltage will then be sent to both the wifi and HMI system, displaying the value to the user. The value will be updating as often as the RPM value. Though the MQTT application worked just fine for the user to manipulate the exhibit, to improve user experience we would create our own website/web application. This application would do the same thing as the MQTT explorer, but provide a better usability while reducing user error.</p> <p>Lastly, our API, after dumping half our messages we would add one to send messages that represent an error that a system might be experiencing. To complete this, each system would need to add try and except statements. When an error arises, it doesn't stop the code, but sends the error that it is experiencing to all systems. Increasing the entire systems debuggability, by allowing anyone viewing the messages to know what error is occurring and who is experiencing it.</p>"},{"location":"subfolder/resources/","title":"Resources","text":""},{"location":"subfolder/resources/#title-resources","title":"title: Resources","text":""},{"location":"subfolder/showcasePoster/","title":"Showcase Poster","text":"<p> PDF of team poster.</p>"}]}